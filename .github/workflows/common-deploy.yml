name: 'Common Deploy'

# Note: Changes to this workflow file will NOT automatically trigger package deployments.
# Package workflows no longer watch this file to prevent mass deployments.
# If you need to update deployment logic for all packages, you must manually trigger
# each package workflow or update them to temporarily watch this file again.

on:
  workflow_call:
    inputs:
      package-name:
        required: true
        type: string
      install-script:
        required: false
        type: string

jobs:
  publish:
    name: 'Publish'
    runs-on: ubuntu-latest
    steps:
      - name: Print package name
        run: echo Publishing ${{ inputs.package-name }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'
          scope: '@efebia'
      - name: Build package
        run: |
          PACKAGE_NAME=${{ inputs.package-name }}
          ${{ inputs.install-script || 'yarn workspaces focus ${PACKAGE_NAME}' }}
          yarn workspace ${{ inputs.package-name }} build
      - name: Check and update version
        id: version_check
        run: |
          PACKAGE_NAME=${{ inputs.package-name }}
          # Get package directory name (remove @efebia/ prefix)
          PACKAGE_DIR=$(echo $PACKAGE_NAME | sed 's/@efebia\///')
          PACKAGE_JSON_PATH="./packages/$PACKAGE_DIR/package.json"
          
          # Get current version from package.json
          LOCAL_VERSION=$(node -p "require('$PACKAGE_JSON_PATH').version")
          echo "Local version in package.json: $LOCAL_VERSION"
          
          # Get latest published version from npm
          LATEST_NPM_VERSION=$(npm view "$PACKAGE_NAME" version 2>/dev/null || echo "0.0.0")
          echo "Latest version on npm: $LATEST_NPM_VERSION"
          
          # Compare versions and bump if needed
          if [ "$LOCAL_VERSION" = "$LATEST_NPM_VERSION" ] || [ "$(printf '%s\n' "$LOCAL_VERSION" "$LATEST_NPM_VERSION" | sort -V | head -n1)" = "$LOCAL_VERSION" ]; then
            echo "Local version ($LOCAL_VERSION) is not higher than npm version ($LATEST_NPM_VERSION)"
            echo "Bumping patch version..."
            
            # Parse current version
            IFS='.' read -r major minor patch <<< "$LATEST_NPM_VERSION"
            
            # Increment patch version
            patch=$((patch + 1))
            NEW_VERSION="$major.$minor.$patch"
            
            echo "Bumping version to $NEW_VERSION"
            
            # Update package.json using Node.js
            node -e "
              const fs = require('fs');
              const pkg = require('$PACKAGE_JSON_PATH');
              pkg.version = '$NEW_VERSION';
              fs.writeFileSync('$PACKAGE_JSON_PATH', JSON.stringify(pkg, null, 2) + '\n');
            "
            
            echo "Updated package.json to version $NEW_VERSION"
          else
            echo "Local version ($LOCAL_VERSION) is higher than npm version ($LATEST_NPM_VERSION), no bump needed"
          fi
      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.EFEBIA_NPM_PUBLISH_PKG }}
        run: |
          echo "npmAuthToken: ${NODE_AUTH_TOKEN}" >> .yarnrc.yml
          yarn workspace ${{ inputs.package-name }} npm publish
